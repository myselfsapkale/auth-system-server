
services:
  mysqldb:
    image: 'mysql:8.0'
    container_name: "mysqldb"
    environment:
      - MYSQL_ROOT_PASSWORD=my-secret-pw
      - MYSQL_DATABASE=authdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pmy-secret-pw"]
      timeout: 30s
      retries: 10
      start_period: 60s
      interval: 10s
    ports:
      - "3333:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./installation_help/mysqldemo.sql:/docker-entrypoint-initdb.d/mysqldemo.sql
    networks:
      - mynetwork

  redisdb:
    image: 'redis:7-alpine'
    container_name: 'redisdb'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mynetwork

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:5540"
    networks:
      - mynetwork
    depends_on:
      - redisdb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.25
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      retries: 15
      start_period: 120s
      timeout: 30s

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.25
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      retries: 15
      start_period: 120s
      timeout: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.25
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana-dev
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      retries: 15
      start_period: 180s
      timeout: 30s

  iam:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: 'iam:dev'
    container_name: 'iam-dev'
    depends_on:
      mysqldb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      kibana:
        condition: service_healthy
    environment:
      - IAM_SERVICE_URL=http://localhost:8000/
    ports:
      - "8000:8000"
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/auth/v1/health_check"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 10s

networks:
  mynetwork:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
