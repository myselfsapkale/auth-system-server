version: '3.8'

services:
  mysqldb:
    image: 'mysql:lts'
    container_name: "mysqldb"
    environment:
      - MYSQL_ROOT_PASSWORD=my-secret-pw
      - MYSQL_DATABASE=authdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 5
      start_period: 10s
    ports:
      - "3333:3306"
    volumes:
      - ./installation_help/mysqldemo.sql:/docker-entrypoint-initdb.d/mysqldemo.sql
    networks:
      - mynetwork

  redisdb:
    image: 'redis:latest'
    container_name: 'redisdb'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    ports:
      - "6379:6379"
    networks:
      - mynetwork

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:5540"
    networks:
      - mynetwork
    depends_on:
      - redisdb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    platform: linux/amd64
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false   # disable security
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: logstash
    platform: linux/amd64
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - mynetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    platform: linux/amd64
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - mynetwork

  iam:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: 'iam:dev'
    container_name: 'iam-dev'
    depends_on:
      mysqldb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    environment:
      - MYSQL_HOST=mysqldb
      - REDIS_HOST=redisdb
      - IAM_SERVICE_URL=http://localhost:8000/
      - ENABLE_LOGS=true
      - NODE_ENV=development
    ports:
      - "8000:8000"
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/auth/v1/health_check"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

networks:
  mynetwork:
    driver: bridge

volumes:
  es-data:
